int dp[1001][1001];
    
    int solve(int ind1, int ind2,string& s1, string& s2, int& maxLength) {
        if (ind1 < 0 || ind2 < 0) {
            return 0;
        }
        if (dp[ind1][ind2] != -1) 
        return dp[ind1][ind2];
        
        if (s1[ind1] == s2[ind2]) {
            dp[ind1][ind2] = 1 + solve(ind1 - 1, ind2 - 1, s1, s2, maxLength);
            maxLength = max(maxLength, dp[ind1][ind2]);
        } else {
            dp[ind1][ind2] = 0;
        }
        
        solve(ind1 - 1, ind2, s1, s2, maxLength);
        solve(ind1, ind2 - 1, s1, s2, maxLength);
        
        return dp[ind1][ind2];
    }
    
    int longestCommonSubstr(std::string s1, std::string s2, int n, int m) {
        memset(dp, -1, sizeof(dp));
        int maxLength = 0;
        solve(n - 1, m - 1, s1, s2, maxLength);
        return maxLength;
    }
